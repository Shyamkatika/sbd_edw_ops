select
UPPER(CONCAT(coalesce(ITEMWHSE.SITE_REF::VARCHAR,''),'~',coalesce(ITEMWHSE.ROW_SQN::VARCHAR,''),'~',coalesce(ITEMWHSE.ITEM::VARCHAR,''))) AS PHY_INVTY_KEY,
'SLIES' AS {{var('column_srcsyskey')}},
MD5(UPPER(CONCAT(coalesce(ITEMWHSE.SITE_REF::VARCHAR,''),'~',coalesce(ITEMWHSE.ROW_SQN::VARCHAR,''),'~',coalesce(ITEMWHSE.ITEM::VARCHAR,'')))) AS {{var('column_rechashkey')}},
{{var('default_n')}} AS {{var('column_DEL_FROM_SRC_FLAG')}},
'{{model.name}}' AS {{var('column_ETL_INS_PID')}},
CURRENT_TIMESTAMP::TIMESTAMP_NTZ AS {{var('column_ETL_INS_DTE')}},
'{{model.name}}' AS {{var('column_ETL_UPD_PID')}},
CURRENT_TIMESTAMP::TIMESTAMP_NTZ AS {{var('column_ETL_UPD_DTE')}},
ITEMWHSE.LOADDTS AS {{var('column_z3loddtm')}},
ITEMWHSE.LOADDTS AS {{var('column_vereffdte')}},
'9999-12-31 00:00:00.000' AS {{var('column_verexpirydt')}},
{{var('default_y')}} AS {{var('column_currrecflag')}},
{{var('default_n')}} AS {{var('column_orprecflag')}},
ITEMWHSE.qty_on_hand AS PROD_ON_HAND_QTY,
ITEMWHSE.qty_alloc_co AS PROD_ALLOC_ORD_QTY,
ITEMWHSE.alloc_trn AS PROD_ALLOC_TRNSFR_QTY,
ITEMWHSE.qty_trans AS PROD_TRNSFR_QTY,
ITEMWHSE.qty_ordered AS ORD_QTY,
ITEMWHSE.qty_mrb AS NON_NETTABLE_STK_QTY,
ITEMWHSE.qty_sold_ytd AS PROD_SOLD_YTD_QTY,
ITEMWHSE.qty_pur_ytd AS PROD_PUR_YTD_QTY,
ITEMWHSE.trn_in_ytd AS PROD_TRNSFR_IN_YTD_QTY,
ITEMWHSE.trn_out_ytd AS PROD_TRNSFR_OUT_YTD_QTY,
ITEMWHSE.qty_reorder AS PROD_SFTY_STK_QTY,
ITEMWHSE.sales_ytd AS SLS_AMT_YTD,
ITEMWHSE.sales_ptd AS SLS_AMT_PERD_TO_DTE,
ITEMWHSE.last_cycle AS LAST_CNT_DTE,
ITEMWHSE.qty_wip AS PROD_MFG_QTY,
ITEMWHSE.Uf_qty_pur_ly AS LAST_PUR_QTY,
ITEMWHSE.Uf_qty_sold_ly AS LAST_SOLD_QTY,
ITEMWHSE.Uf_sales_ly AS LAST_YR_SLS_PROJECTIONS_NBR,
ITEMWHSE.Uf_trn_in_ly AS TRNSFR_IN_LAST_YR_NBR,
ITEMWHSE.Uf_trn_out_ly AS TRNSFR_OUT_LAST_YR_NBR,
ITEMWHSE.unit_cost AS PROD_UNIT_COST,
ITEMWHSE.lst_u_cost AS PROD_LAST_UNIT_COST,
ITEMWHSE.avg_u_cost AS PROD_AVG_UNIT_COST,
ITEMWHSE.asm_setup AS PROD_ASSEMBLY_SETUP_COST,
ITEMWHSE.asm_run AS PROD_ASSEMBLY_RUN_COST,
ITEMWHSE.asm_matl AS PROD_ASSEMBLY_FIXED_PROD_COST,
ITEMWHSE.asm_other AS PROD_ASSEMBLY_OTHER_COST,
ITEMWHSE.asm_fixed AS PROD_ASSEMBLY_FIXED_COST,
ITEMWHSE.asm_var AS PROD_ASSEMBLY_VARBL_COST,
ITEMWHSE.asm_outside AS PROD_ASSEMBLY_OUTSIDE_COST,
ITEMWHSE.comp_setup AS PROD_CMPNT_SETUP_COST,
ITEMWHSE.comp_run AS PROD_CMPNT_RUN_COST,
ITEMWHSE.comp_matl AS PROD_CMPNT_MATL_COST,
ITEMWHSE.comp_other AS PROD_CMPNT_OTHER_COST,
ITEMWHSE.comp_fixed AS PROD_CMPNT_FIXED_COST,
ITEMWHSE.comp_var AS PROD_CMPNT_VARBL_COST,
ITEMWHSE.comp_outside AS PROD_CMPNT_OUTSIDE_PROC_COST,
ITEMWHSE.sub_matl AS PROD_SUBTOTAL_AMT,
ITEMWHSE.cur_u_cost AS PROD_CURR_UNIT_COST,
ITEMWHSE.unit_mat_cost AS PROD_MATL_UNIT_COST,
ITEMWHSE.unit_duty_cost AS PROD_DUTY_UNIT_COST,
ITEMWHSE.unit_freight_cost AS PROD_FRT_UNIT_COST,
ITEMWHSE.unit_brokerage_cost AS PROD_BROKERAGE_UNIT_COST,
ITEMWHSE.unit_loc_frt_cost AS PROD_FRT_UNIT_LCL_COST,
ITEMWHSE.cur_mat_cost AS PROD_CURR_COST,
ITEMWHSE.cur_duty_cost AS PROD_DUTY_CURR_COST,
ITEMWHSE.cur_freight_cost AS PROD_FRT_CURR_COST,
ITEMWHSE.cur_brokerage_cost AS PROD_BROKERAGE_CURR_COST,
ITEMWHSE.cur_loc_frt_cost AS PROD_LCL_FRT_CURR_COST,
ITEMWHSE.matl_cost AS PROD_MATL_COST,
ITEMWHSE.lbr_cost AS PROD_LABR_COST,
ITEMWHSE.fovhd_cost AS PROD_FOH_COST,
ITEMWHSE.vovhd_cost AS PROD_VOH_COST,
ITEMWHSE.out_cost AS PROD_OUTSIDE_COST,
ITEMWHSE.cur_matl_cost AS PROD_MATL_CURR_COST,
ITEMWHSE.cur_lbr_cost AS PROD_LABR_CURR_COST,
ITEMWHSE.cur_fovhd_cost AS PROD_FIX_OVHD_CURR_COST,
ITEMWHSE.cur_vovhd_cost AS PROD_VAR_OVHD_CURR_COST,
ITEMWHSE.cur_out_cost AS PROD_OUTSIDE_CURR_COST,
ITEMWHSE.avg_matl_cost AS PROD_AVG_COST,
ITEMWHSE.avg_lbr_cost AS PROD_LABR_AVG_COST,
ITEMWHSE.avg_fovhd_cost AS PROD_FIX_OVHD_AVG_COST,
ITEMWHSE.avg_vovhd_cost AS PROD_VAR_OVHD_AVG_COST,
ITEMWHSE.avg_out_cost AS PROD_OUTSIDE_AVG_COST,
ITEMWHSE.cycle_freq AS CYCLE_FREQ,
ITEMWHSE.cnt_in_proc AS CNT_IN_PROC,
case when UPPER(ITEMWHSE.cycle_flag) in ('NO','FALSE','0') or UPPER(ITEMWHSE.cycle_flag) is null
or length(TRIM(ITEMWHSE.cycle_flag))<1 then 'N' when UPPER(ITEMWHSE.cycle_flag) in ('YES','TRUE','1')
then 'Y' else 'U' end as CYCLE_TRIGGERED_FLAG,
case when length(trim(UPPER((ITEMWHSE.cycle_type)))) <1 then {{var('default_mapkey')}} when UPPER(ITEMWHSE.cycle_type)
IS NULL then {{var('default_mapkey')}} else UPPER(ITEMWHSE.cycle_type) end AS INVTY_CYCLE_TYP_LKEY,
ITEMWHSE.qty_rsvd_co AS RESERVED_QTY,
ITEMWHSE.replen_po_num AS PO_NBR,
ITEMWHSE.count_sequence AS INVTY_CNT_SEQ_NBR,
ITEMWHSE.asm_tool AS ASSEMBLY_TOOL_COST,
ITEMWHSE.asm_fixture AS ASSEMBLY_FIXTURE_COST,
ITEMWHSE.comp_tool AS TOOL_COST,
ITEMWHSE.comp_fixture AS FIXTURE_COST,
ITEMWHSE.unit_insurance_cost AS INS_COST,
ITEMWHSE.cur_insurance_cost AS CURR_INS_COST,
ITEMWHSE.min_consignment_qty AS MIN_CNSGN_QTY,
ITEMWHSE.max_consignment_qty AS MAX_CNSGN_QTY,
ITEMWHSE.qty_contained AS CONTAINED_QTY,
case when length(trim(UPPER((ITEMWHSE.item)))) <1 then {{var('default_mapkey')}} when UPPER(ITEMWHSE.item)
IS NULL then {{var('default_mapkey')}} else UPPER(ITEMWHSE.item) end AS PROD_KEY,
case when length(trim(UPPER((ITEMWHSE.whse)))) <1 then {{var('default_mapkey')}} when UPPER(ITEMWHSE.whse)
IS NULL then {{var('default_mapkey')}} else UPPER(ITEMWHSE.whse) end AS STORG_SUB_LOC_KEY,
ITEMWHSE.phy_inv_qty AS PROD_PHY_INVTY_QTY,
case when length(trim(UPPER((ITEMWHSE.site_ref)))) <1 then {{var('default_mapkey')}} when UPPER(ITEMWHSE.site_ref)
IS NULL then {{var('default_mapkey')}} else UPPER(ITEMWHSE.site_ref) end AS LOC_KEY
FROM {{source('SLIES','ITEMWHSE')}} ITEMWHSE